# Web 服务器配置
server:
  port: 10004 # 应用程序监听的端口号，原10004已被占用

spring:
  application:
    name: spring-ai-agent # 应用程序的名称

  # Spring AI 配置
  ai:
    chat:
      client:
        enabled: true # 禁用 ChatClient.Builder Bean 的自动配置。
        # 当您需要手动创建 ChatClient.Builder 并指定使用哪个 ChatModel 时（如本例中通过 @Qualifier 指定 DashScope），
        # 通常需要禁用默认的自动配置，以避免 Bean 冲突或确保使用正确的 ChatModel。

    # Alibaba DashScope 配置
    dashscope:
      api-key: ${DASHSCOPE_API_KEY} # 阿里云 DashScope 服务的 API Key
      # 注意：根据 spring-ai-alibaba-starter 的配置方式，超时和重试配置在其他位置
      # 为了解决连接超时问题，我们需要调整底层HTTP客户端的配置


#    # OpenAI/OpenRouter 配置 (注意：虽然配置了，但 Java 代码中通过 @Qualifier 明确使用了 DashScope)
#    openai:
#      api-key: ${AI_DeepSeek_API_KEY} # OpenAI 或兼容 OpenAI API 的服务的 API Key。
#      # 使用 ${...} 占位符表示从环境变量或外部配置源获取，推荐做法。
#      base-url: https://openrouter.ai/api/v1 # OpenAI 或兼容 OpenAI API 的服务的 Base URL。这里配置的是 OpenRouter 的地址。
#      chat:
#        options:
#          model: deepseek/deepseek-r1:free # 指定通过此配置使用的模型 ID。这里是 OpenRouter 上 DeepSeek 的一个免费模型。
#        #          model: google/gemini-2.0-flash-thinking-exp:free # 其他可选的 OpenRouter 模型 (注释掉)
#        #          model: deepseek/deepseek-chat-v3-0324:free # 其他可选的 OpenRouter 模型 (注释掉)
#        #          model: google/gemini-2.0-flash-exp:free # 其他可选的 OpenRouter 模型 (注释掉)
#
#        # Chat 接口路径，与 OpenAI 接口保持一致
#        completions-path: /chat/completions # 指定聊天完成接口的路径，通常与 OpenAI API 兼容。


    # MCP (Model Context Protocol) 客户端配置
    # 注意：Spring AI Alibaba Starter 可能使用不同的配置方式
    # 此处保留原始配置，但注意可能需要根据实际依赖版本调整




  datasource:
    url: jdbc:mysql://localhost:3306/emall?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
    password: mysql
    driver-class-name: com.mysql.cj.jdbc.Driver
  # 配置事务管理器
  jpa:
    properties:
      hibernate:
        transaction:
          jta:
            platform: org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform # 如果不使用JTA，可以这样配置或不配置
  # 注意：Spring Boot 3.x 中 transaction.rollback-on-create-error 已被移除或更改
  # 如需类似功能，请使用 @Transactional 注解的 rollbackFor 属性

mybatis:
  # 指定Model/POJO类所在的包，MyBatis会为这些类注册类型别名
  type-aliases-package: com.springaiagent.pojo # <-- 修正为你的POJO包名

  # 如果你只使用注解编写SQL，请删除下面这行
  # 如果你使用Mapper XML文件，请确保XML文件在此路径下
  # mapper-locations: classpath*:com/miku/springaialibabaagent/mapper/*.xml

  configuration:
    # 开启驼峰命名自动映射，数据库字段 user_name 可以自动映射到Java属性 userName
    map-underscore-to-camel-case: true
    # 打印SQL到控制台（仅建议在开发环境使用）
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# 推荐使用 @MapperScan 注解来扫描Mapper接口，而不是在这里配置
# 在 Spring Boot 主应用类或配置类上添加 @MapperScan("com.springaiagent.mapper")
# mybatis.mapper-locations: classpath*:com/miku/springaialibabaagent/mapper/*Mapper.java # <-- 删除此行
